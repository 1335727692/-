题意概括：
给一个 N * M 的地图，孙悟空初始位置在 S ，唐僧位置在 T。中间地形有：

“ . " ：代表平地，畅通无阻；

“ P ”：此处有加速药丸，药丸可以使孙悟空下一次移动花费时间为0（每次进入该地形只能拿一个，当然孙悟空可以进入无限次拿无限个）；

“ B ”：此处有氧气，氧气用于通过有毒气的地形（每次进入该地形只能拿一个，孙悟空最多可以拿 5 个氧气）；

“ # ”：此处有毒气，通过这里需要花费一个氧气（即无氧气不能进入这里），通过毒气区的孙猴子需要一分钟恢复健康。

孙悟空每走一步花费一分钟，求孙悟空成功拯救唐僧的最短时间。如果无法救人输出“ -1 ”。



解题思路：
一、状态搜索（BFS+dp)

状态：dp[ x ][ y ][ N ] : 当前在（x, y）手里有 N 瓶氧气的最少花费时间；

状态转移：

当前位置（X，Y），转移位置（TX，TY）

经过 “ S ” 或者 “ . " 时：无限制条件，花费的只是时间，所以 dp[ TX ][ TY ][ N ] = min( dp[ TX ][ TY ][ N ], dp[ X ][ Y ][ N ] + 1);

经过“ P ” 时：拿到药丸立即用和后面用其实对于总时间是没有影响的，所以拿到就用，相当于经过这种地区不需要花费时间

　　　　　　即：dp[ TX ][ TY ][ N ] = min( dp[ TX ][ TY ][ N ], dp[ X ][ Y ][ N ] );

经过“ B ” 时：第一种情况：氧气未满，肯定要带上一瓶氧气：dp[ TX ][ TY ][ N + 1 ] = min( dp[ TX ][ TY ][ N + 1 ], dp[ X ][ Y ][ N ] + 1);

　　　　　　第二种情况：氧气已满，这种跟经过平地一样：dp[ TX ][ TY ][ N ] = min( dp[ TX ][ TY ][ N ], dp[ X ][ Y ][ N ] + 1);

经过“ # ”时：没有氧气，无法进入。

　　　　　   有氧气：氧气减一，花费时间是 2 （行动需要 1 分钟，疗伤需要 1 分钟）dp[ TX ][ TY ][ N - 1] = min( dp[ TX ][ TY ][ N - 1 ], dp[ X ][ Y ][ N ] + 2);

到达“ T ”时：更新状态 dp[ TX ][ TY ][ N ] = min( dp[ TX ][ TY ][ N ], dp[ X ][ Y ][ N ] + 1)， （TX， TY， N）不需要再入队。

